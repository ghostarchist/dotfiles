:PROPERTIES:
:ID:       be09c8bb-f53c-451c-9d06-5dcdc6f61000
:END:
#+title: Dotfiles
#+author: Jacob Boldman
#+email: jacob@boldman.co

#+startup: overview
#+startup: hideblocks

#+export_file_name: dotfiles

#+HTML: <a href="https://www.gnu.org/software/emacs/"><img src="https://img.shields.io/badge/Emacs-28.0.91-blueviolet.svg?style=flat-square&logo=GNU%20Emacs&logoColor=white"></a>
#+HTML: <a href="https://orgmode.org"><img src="https://img.shields.io/badge/Org-9.5.2-%2377aa99?style=flat-square&logo=org&logoColor=white"></a>

#+name: description
#+BEGIN_SRC text
Immutable GNU/Guix configurations.
#+END_SRC

Built for freedom

+ 100% Immutable
+ 100% Declarative
+ 100% Reproducible

* Introduction

#+NAME: description
#+begin_src text
Reproducible GuixSD dotfiles
#+end_src
This is my personal configuration for [[https://linux.org][GNU/Linux]] systems. It enables a consistent experience and computing environment across all of my machines. This project is written with [[https://gnu.org/software/emacs/][GNU/Emacs]], leveraging its capabilities for [[https://doi.org/10.1093/comjnl/27.2.97][Literate Programming]], a technique where programs are written in a natural language, such as English, interspersed with snippets of code to describe a software project.
In that same line of thinking I also try to make this code as modular as possible, breaking functions out into variables to allow proper seperation to proper document while still keeping it in self-contained blocks to allow for proper syntax within org-src mode.
I used "lattice" as my module name as a play on a structure to control my GNU/Guix herd.
These configurations utilize [[https://git.sr.ht/~abcdw/rde][Tropin's rde system]] and are heavily inspired by [[https://github.com/engstrand-config/guix-dotfiles][Engstrands' guix-dotfiles]] to make as much of the system configurable by guile as possible.
#+NAME: file-warning
#+BEGIN_SRC text
    This file is controlled by /etc/dotfiles/README.org
    ALL CHANGES ARE FUTILE!
#+END_SRC
* Configuration
#+begin_src scheme :noweb yes :tangle ./config.scm
(define-module (config)
  #:use-module (rde features)
  #:use-module (rde features base)
  #:use-module (rde features gnupg)
  #:use-module (rde features keyboard)
  #:use-module (rde features system)
  #:use-module (rde features wm)
  #:use-module (rde features xdisorg)
  #:use-module (rde features xdg)
  #:use-module (rde features password-utils)
  #:use-module (rde features version-control)
  #:use-module (rde features fontutils)
  #:use-module (rde features terminals)
  #:use-module (rde features tmux)
  #:use-module (rde features shells)
  #:use-module (rde features shellutils)
  #:use-module (rde features ssh)
  #:use-module (rde features emacs)
  #:use-module (rde features emacs-xyz)
  #:use-module (rde features linux)
  #:use-module (rde features bittorrent)
  #:use-module (rde features mail)
  #:use-module (rde features docker)
  #:use-module (rde features video)
  #:use-module (rde features markup)
  #:use-module (rde features predicates)
  #:use-module (gnu services)
  #:use-module (gnu home services)
  #:use-module (rde features networking)
  #:use-module (gnu services)
  #:use-module (rde home services i2p)
  ;; #:use-module (gnu services nix)
  #:use-module (gnu system)
  #:use-module (gnu system keyboard)
  #:use-module (gnu system file-systems)
  #:use-module (gnu system mapped-devices)
  #:use-module (gnu bootloader)
  #:use-module (gnu bootloader grub)
  #:use-module (gnu packages)
  #:use-module (gnu services xorg)
  #:use-module (gnu packages wm)
  #:use-module (gnu packages image)
  #:use-module (gnu packages admin)
  #:use-module (gnu packages xdisorg)
  #:use-module (gnu packages terminals)
  #:use-module (gnu packages freedesktop)
  #:use-module (gnu packages emacs)
  #:use-module (gnu packages emacs-xyz)
  #:use-module (gnu home services shepherd)
  #:use-module (rde packages)
  #:use-module (rde packages emacs)
  #:use-module (rde packages emacs-xyz)
  #:use-module (gnu packages fonts)
  #:use-module (guix gexp)
  #:use-module (guix inferior)
  #:use-module (guix channels)
  #:use-module (dwl-guile utils)
  #:use-module (dwl-guile patches)
  #:use-module (dwl-guile home-service)
  #:use-module (dwl-guile configuration)
  #:use-module (dwl-guile configuration default-config)
  #:use-module (dtao-guile home-service)
  #:use-module (lattice utils)
  #:use-module (ice-9 match)
  #:use-module (rnrs lists))


(define-public %lattice-keyboard-layout
  (keyboard-layout "us"
                   #:options
                   '("ctrl:swapcaps")))

(define %lattice-dwl-guile-patches
  (list %patch-xwayland
        %patch-swallow
        %patch-movestack
        %patch-attachabove))

(define %lattice-dwl-guile-config
  (dwl-config
   (xkb-rules %lattice-keyboard-layout)
   (border-px 2)
   (rules
    (list
     (dwl-rule
      (id "emacs")
      (title "emacs")
      (alpha 0.9))))
   (keys
    (append
     (list
      (dwl-key
       (key "s-0")
       (action
        '(dwl:cycle-layout)))
      (dwl-key
       (key "s-<tab>")
       (action
        '(dwl:view-previous))))
     %dwl-base-keys))
   (colors
    (dwl-colors
     (root "#191919")
     (border "#808080")
     (focus "#FFCC00")))))

;; Checks if SYMBOL corresponds to a patch that is/will
;; be applied to dwl-guile, based on the features values in CONFIG.
;; SYMBOL should be the name of the patch, not including the ".patch" extension.
;; I.E @code{(has-dwl-patch? 'xwayland config)}.
(define
  (has-dwl-patch? symbol config)
  (let
      ((patch-name
        (string-append
         (symbol->string symbol)
         ".patch")))
    (find
     (lambda
         (p)
       (equal? patch-name
               (local-file-name p)))
     (get-value 'dwl-guile-patches config))))

(define*
  (feature-wayland-dwl-guile
   #:key
   (dwl-guile-configuration
    (home-dwl-guile-configuration)))
  "Setup dwl-guile."
  (ensure-pred home-dwl-guile-configuration? dwl-guile-configuration)
  (define
    (get-home-services config)
    "Return a list of home services required by dwl."
    (list
     (service home-dwl-guile-service-type
              dwl-guile-configuration)))
  (feature
   (name 'wayland-dwl-guile)
   (values
    `((wayland . #t)
      (dwl-guile . #t)
      (dwl-guile-patches
       . ,(home-dwl-guile-configuration-patches dwl-guile-configuration))))
   (home-services-getter get-home-services)))

(define*
  (feature-wayland-mako
   #:key
   (dismiss-key "C-s-d")
   (dismiss-all-key "C-S-s-d")
   (add-keybindings? #t))
  "Setup mako, a lightweight notification daemon for Wayland"
  (ensure-pred string? dismiss-key)
  (ensure-pred string? dismiss-all-key)
  (ensure-pred boolean? add-keybindings?)
  (define
    (get-home-services config)
    "Return a list of home services required by mako"
    (require-value 'font-monospace config)
    (make-service-list
     (simple-service
      'add-mako-home-packages-to-profile
      home-profile-service-type
      (pkgs "mako" "libnotify"))
     (simple-service
      'create-mako-config
      home-files-service-type
      `((".config/mako/config"
         ,(alist->ini "mako-config"
                      `(("font"
                         . ,(font->string 'pango 'font-sans config
                                          #:size 11))
                        ("background-color" . "#252525FF")
                        ("text-color" . "#FFFFFFFF")
                        ("width" . 370)
                        ("height" . 100)
                        ("border-color" . "#555555FF")
                        ("border-size" . 1)
                        ("border-radius" . 0)
                        ("margin" . 5)
                        ("padding" . 10)
                        ("default-timeout" . 15000)
                        ("anchor" . "top-right")
                        ("max-visible" . 2)
                        ("format" . "<b>%s (%a)</b>\\n%b")
                        ("[grouped=true]")
                        ("format" . "<b>%s (%a, %g)</b>\\n%b")
                        ("[hidden]")
                        ("format" . "(%h more notification)"))))))
     (when
         (and add-keybindings?
              (get-value 'dwl-guile config))
       (simple-service
        'add-mako-dwl-keybindings
        home-dwl-guile-service-type
        (modify-dwl-guile-config
         (config =>
                 (dwl-config
                  (inherit config)
                  (keys
                   (append
                    (list
                     (dwl-key
                      (key dismiss-key)
                      (action
                       `(system* ,(file-append mako "/bin/makoctl")
                                 "dismiss")))
                     (dwl-key
                      (key dismiss-all-key)
                      (action
                       `(system* ,(file-append mako "/bin/makoctl")
                                 "dismiss" "--all"))))
                    (dwl-config-keys config))))))))))
  (feature
   (name 'wayland-mako)
   (home-services-getter get-home-services)))

(define*
  (feature-wayland-foot
   #:key
   (package foot)
   (set-default-terminal? #t)
   (window-alpha 0.9)
   (swallow-clients? #t))
  ;; TODO: Add swallow patch automatically if #t?
  "Setup foot terminal."
  (ensure-pred package? package)
  (ensure-pred boolean? set-default-terminal?)
  (ensure-pred number? window-alpha)
  (ensure-pred boolean? swallow-clients?)
  (define
    (get-home-services config)
    "Return a list of home services required by foot."
    (require-value 'font-monospace config)
    (let
        ((has-dwl-guile?
          (get-value 'dwl-guile config)))
      (make-service-list
       (simple-service
        'add-foot-home-packages-to-profile
        home-profile-service-type
        (list package))
       (simple-service
        'create-foot-config
        home-files-service-type
        `((".config/foot/foot.ini"
           ,(alist->ini "foot-config"
                        `(("pad" . "5x5")
                          ("font" . "monospace:size=12")
                          ("dpi-aware" . "no")
                          ;; Certain TUI programs prefer "xterm"
                          ("term" . "xterm")
                          ("[key-bindings]")
                          ("scrollback-up-line" . "Mod1+k")
                          ("scrollback-down-line" . "Mod1+j")
                          ("clipboard-copy" . "Mod1+c")
                          ("clipboard-paste" . "Mod1+v")
                          ("search-start" . "Mod1+s")
                          ("font-increase" . "Mod1+Control+k")
                          ("font-decrease" . "Mod1+Control+j")
                          ("font-reset" . "Mod1+Control+0")
                          ;; This should be defined in dwl.
                          ("spawn-terminal" . "Mod1+Shift+Return")
                          ("show-urls-launch" . "Mod1+u")
                          ("show-urls-copy" . "Mod1+Control+u")
                          ("[search-bindings]")
                          ("find-prev" . "Mod1+p")
                          ("find-next" . "Mod1+n")
                          ("cursor-left" . "Mod1+h")
                          ("cursor-right" . "Mod1+l")
                          ("cursor-left-word" . "Mod1+b")
                          ("cursor-right-word" . "Mod1+w")
                          ("cursor-home" . "Mod1+i")
                          ("cursor-end" . "Mod1+a")
                          ("clipboard-paste" . "Mod1+v")
                          ("[mouse-bindings]")
                          ("select-begin-block" . "none")
                          ("select-word-whitespace" . "Mod1+BTN_LEFT-2"))))))
       (when
           (and set-default-terminal? has-dwl-guile?)
         (simple-service
          'set-foot-as-default-terminal
          home-dwl-guile-service-type
          (modify-dwl-guile-config
           (config =>
                   (dwl-config
                    (inherit config)
                    (rules
                     (append
                      (list
                       (dwl-rule
                        (id "foot")
                        (alpha  window-alpha)
                        (no-swallow
                         (not swallow-clients?))
                        (terminal swallow-clients?)))
                      (dwl-config-rules config)))))))))))
  (feature
   (name 'wayland-foot)
   (home-services-getter get-home-services)))


(define*
  (feature-wayland-wlsunset
   #:key
   (package wlsunset)
   (auto-start? #t)
   (toggle-key "s-<end>")
   (latitude 33.3)
   (longitude -111.7)
   (gamma-low 2000)
   (gamma-high 6500)
   (add-keybindings? #t))
  "Setup wlsunset for adjusting day/night gamma for Wayland compositors."
  (ensure-pred package? wlsunset)
  (ensure-pred boolean? auto-start?)
  (ensure-pred string? toggle-key)
  (ensure-pred number? latitude)
  (ensure-pred number? longitude)
  (ensure-pred number? gamma-low)
  (ensure-pred number? gamma-high)
  (ensure-pred boolean? add-keybindings?)
  (define
    (get-home-services config)
    "Return a list of home services required by wlsunset"
    (let
        ((has-dwl-guile?
          (get-value 'dwl-guile config)))
      (make-service-list
       (simple-service
        'add-wlsunset-home-packages-to-profile
        home-profile-service-type
        (list package))
       (simple-service
        'add-wlsunset-shepherd-service
        home-shepherd-service-type
        (list
         (shepherd-service
          (documentation "Run wlsunset.")
          (provision
           '(wlsunset))
          (requirement
           (if has-dwl-guile?
               '(dwl-guile)
               '()))
          (auto-start? auto-start?)
          (respawn? #t)
          (start
           #~(make-forkexec-constructor
              (list
               #$(file-append wlsunset "/bin/wlsunset")
               #$(string-append "-l"
                                (number->string latitude))
               #$(string-append "-L"
                                (number->string longitude))
               #$(string-append "-t"
                                (number->string gamma-low))
               #$(string-append "-T"
                                (number->string gamma-high)))
              #:log-file #$(make-log-file "wlsunset")))
          (actions
           (list
            (shepherd-action
             (name 'toggle)
             (documentation "Toggles the wlsunset service on/off.")
             (procedure #~(lambda
                              (running?)
                            (if running?
                                (stop 'wlsunset)
                                (start 'wlsunset))
                            #t)))))
          (stop #~(make-kill-destructor)))))
       (when
           (and add-keybindings? has-dwl-guile?)
         (simple-service
          'add-wlsunset-dwl-keybindings
          home-dwl-guile-service-type
          (modify-dwl-guile-config
           (config =>
                   (dwl-config
                    (inherit config)
                    (keys
                     (append
                      (list
                       (dwl-key
                        (key toggle-key)
                        (action
                         `(system* ,(file-append shepherd "/bin/herd")
                                   "toggle"
                                   "wlsunset"))))
                      (dwl-config-keys config)))))))))))
  (feature
   (name 'wayland-wlsunset)
   (home-services-getter get-home-services)))

(define lattice-dtao-guile-left-blocks
  (append
   (map
    (lambda
        (tag)
      (let
          ((str
            (string-append "^p(8)"
                           (number->string tag)
                           "^p(8)"))
           (index
            (- tag 1)))
        (dtao-block
         (interval 0)
         (events? #t)
         (click
          `(match button
             (0
              (dtao:view ,index))))
         (render
          `(cond
            ((dtao:selected-tag? ,index)
             ,(string-append "^bg(#ffcc00)^fg(#191919)" str "^fg()^bg()"))
            ((dtao:urgent-tag? ,index)
             ,(string-append "^bg(#ff0000)^fg(#ffffff)" str "^fg()^bg()"))
            ((dtao:active-tag? ,index)
             ,(string-append "^bg(#323232)^fg(#ffffff)" str "^fg()^bg()"))
            (else ,str))))))
    (iota 9 1))
   (list
    (dtao-block
     (events? #t)
     (click
      `(dtao:next-layout))
     (render
      `(string-append "^p(4)"
                      (dtao:get-layout)))))))

(define lattice-dtao-guile-center-blocks
  (list
   (dtao-block
    (events? #t)
    (render
     `(dtao:title)))))

(define lattice-dtao-guile-right-blocks
  (list
   (dtao-block
    (interval 1)
    (render
     `(strftime "%A, %d %b (w.%V) %T"
                (localtime
                 (current-time)))))))

(define*
  (feature-wayland-dtao-guile)
  "Install and configure dtao-guile"
  (define height 25)
  (define
    (get-home-services config)
    "Return a list of home services required by dtao-guile."
    (require-value 'font-monospace config)
    (list
     (service home-dtao-guile-service-type
              (home-dtao-guile-configuration
               (config
                (dtao-config
                 (font(font->string 'fcft 'font-monospace config
                                    #:bold? #t))
                 (block-spacing 0)
                 (use-dwl-guile-colorscheme? #t)
                 (modules
                  '((ice-9 match)
                    (ice-9 popen)
                    (ice-9 rdelim)
                    (srfi srfi-1)))
                 (padding-left 0)
                 (padding-top 0)
                 (padding-bottom 0)
                 (height height)
                 (left-blocks lattice-dtao-guile-left-blocks)
                 (center-blocks lattice-dtao-guile-center-blocks)
                 (right-blocks lattice-dtao-guile-right-blocks)))))))
  (feature
   (name 'wayland-dtao-guile)
   (values
    `((statusbar? . #t)
      (statusbar-height . ,height)
      (dtao-guile . #t)))
   (home-services-getter get-home-services)))

(define*
  (feature-wayland-bemenu
   #:key
   (set-default-menu? #t))
  "Setup bemenu."
  (ensure-pred boolean? set-default-menu?)
  (define
    (get-home-services config)
    "Return a list of home services required by bemenu."
    (require-value 'font-monospace config)
    (make-service-list
     (simple-service
      'add-bemenu-home-package-to-profile
      home-profile-service-type
      (list bemenu))
     (when
         (and set-default-menu?
              (get-value 'dwl-guile config))
       (simple-service
        'set-bemenu-as-default-menu
        home-dwl-guile-service-type
        (modify-dwl-guile-config
         (config =>
                 (dwl-config
                  (inherit config)
                  (menu
                   `(,(file-append bemenu "/bin/bemenu-run"))))))))
     (simple-service
      'bemenu-options
      home-environment-variables-service-type
      (alist->environment-variable
       "BEMENU_OPTS"
       `(("ignorecase" . #t)
         ("line-height"
          . ,(get-value 'statusbar-height config 25))
         ("filter" . #f)
         ("wrap" . #f)
         ("list" . #f)
         ("prompt" #f)
         ("prefix" . #f)
         ("index" . #f)
         ("password" . #f)
         ("scrollbar" . #f)
         ("ifne" . #f)
         ("fork" . #f)
         ("no-exec" . #f)
         ("bottom" . #f)
         ("grab" . #f)
         ("no-overlap" . #f)
         ("monitor" . #f)
         ("fn"
          . ,(font->string 'pango 'font-monospace config
                           #:bold? #t
                           #:size 10))
         ("tb" . "#FFCC00")
         ("tf" . "#000000")
         ("fb" . "#1A1A1A")
         ("ff" . "#FFFFFF")
         ("nb" . "#1A1A1A")
         ("nf" . "#FFFFFF")
         ("hb" . "#1A1A1A")
         ("hf" . "#FFCC00")
         ("sb" . #f)
         ("sf" . #f)
         ("scb" . #f)
         ("scf" . #f))))))
  (feature
   (name 'wayland-bemenu)
   (home-services-getter get-home-services)))

(define*
  (make-emacs-feature base-name
                      #:key
                      (home-services
                       (const
                        '()))
                      (system-services
                       (const
                        '())))
  "Create a basic emacs feature configuration."
  (let
      ((f-name
        (symbol-append 'emacs- base-name)))
    (feature
     (name f-name)
     (values
      `((,f-name . #t)))
     (home-services-getter home-services)
     (system-services-getter system-services))))

(define*
  (feature-emacs-default-editor)
  "Configure emacs as the default system editor."
  (define
    (get-home-services config)
    (list
     (simple-service
      'set-emacs-environment-variables
      home-environment-variables-service-type
      `(("EDITOR" . ,(file-append %lattice-emacs-package "/bin/emacs"))
        ;; Used by guix commands, e.g. guix edit. rde sets this by itself,
        ;; but the --no-wait option does not seem to play nice with this setup.
        ("VISUAL" . ,(get-value 'emacs-client-create-frame config))))))
  (feature
   (name 'emacs-default-editor)
   (home-services-getter get-home-services)))

(define*
  (feature-emacs-org-latex-preview)
  "Add and configure latex previews in Emacs Org mode."
  (define emacs-f-name 'org-latex-preview)
  (define
    (get-home-services config)
    (list
     (simple-service
      'add-org-mode-latex-preview-home-packages-to-profile
      home-profile-service-type
      (pkgs "texlive" "texlive-latex-preview" "texlive-graphics-def"))
     (rde-elisp-configuration-service
      emacs-f-name
      config
      `((require 'org)
        ;; Use dvisvgm for latex rendering
        (setq org-latex-create-formula-image-program 'dvisvgm)
        ;; Increase latex preview scale in org mode
        (setq org-format-latex-options
              (plist-put org-format-latex-options :scale 2.8))))))
  (make-emacs-feature emacs-f-name
                      #:home-services get-home-services))

;;TODO Add "TabandGo" key word to RDE repo
(define*
  (feature-emacs-corfu)
  "Add and configure Corfu completion for Emacs."
  (define emacs-f-name 'corfu)
  (define
    (get-home-services config)
    (list
     (rde-elisp-configuration-service
      emacs-f-name
      config
      `((require 'corfu)
        ;; TAB-and-Go completion
        (setq corfu-cycle t)
        (setq corfu-preselect-first nil)
        (setq corfu-auto t)
        (global-corfu-mode 1)
        (define-key corfu-map
          (kbd "<tab>")
          'corfu-next)
        (define-key corfu-map
          (kbd "<backtab>")
          'corfu-previous))
      #:elisp-packages
      (list
       emacs-corfu))))
  (make-emacs-feature emacs-f-name
                      #:home-services get-home-services))

(define*
  (feature-emacs-dashboard)
  "Add and configure emacs-dashboard as a welcome screen."
  (define emacs-f-name 'dashboard)
  (define
    (get-home-services config)
    (list
     (rde-elisp-configuration-service
      emacs-f-name
      config
      `((eval-when-compile
         (require 'dashboard))
        (dashboard-setup-startup-hook)
        (setq dashboard-center-content t)
        (setq dashboard-set-init-info nil)
        (setq dashboard-set-footer nil)
        (setq dashboard-page-separator "\n\n")
        ;;TODO change to projectile or check somehow
        (eval-when-compile
         (require 'project))
        (setq dashboard-projects-backend 'project)
        )
      #:elisp-packages
      (list
       emacs-dashboard
       emacs-project
       emacs-all-the-icons))))
  (make-emacs-feature emacs-f-name
                      #:home-services get-home-services))

(define*
  (feature-emacs-evil
   #:key
   (no-insert-state-message? #t)
   (leader? #t)
   (undo-fu? #t)
   (commentary? #t)
   (collection? #t)
   (surround? #t))
  "Add and configure evil-mode for Emacs."
  (ensure-pred boolean? no-insert-state-message?)
  (ensure-pred boolean? leader?)
  (ensure-pred boolean? undo-fu?)
  (ensure-pred boolean? collection?)
  (ensure-pred boolean? surround?)
  (define emacs-f-name 'evil)
  (define
    (get-home-services config)
    (list
     (rde-elisp-configuration-service
      emacs-f-name
      config
      `( ;; Make the Escape key behave more nicely for evil-mode
        (global-set-key
         (kbd "<escape>")
         'keyboard-quit)
        (define-key query-replace-map
          (kbd "<escape>")
          'quit)
        ;; Hide ``-- INSERT --'' message
        ,@(if no-insert-state-message?
              `((setq evil-insert-state-message nil))
              '())
        ;;Required by the additional packages
        ;;TODO add toggle for these
        (setq evil-want-keybinding nil)
        ;; Use C-u to scroll up
        (setq evil-want-C-u-scroll t)
        ;; undo with higher granularity
        (setq evil-want-fine-undo t)
        ;; The packages below must be loaded and configured in a certain order
        (require 'evil)
        ,@(if leader?
              `((require 'evil-leader)
                (global-evil-leader-mode)
                (evil-leader/set-leader "<SPC>")
                (evil-leader/set-key
                 "<SPC>" 'find-file
                 "b" 'switch-to-buffer
                 "k" 'kill-buffer
                 "K" 'kill-this-buffer
                 "s" 'save-buffer
                 "S" 'evil-write-all
                 )
                '()))
        ,@(if undo-fu?
              `((eval-when-compile
                 (require 'undo-fu))
                (setq evil-undo-system 'undo-fu)
                (define-key evil-normal-state-map
                  (kbd "u")
                  'undo-fu-only-undo)
                (define-key evil-normal-state-map
                  (kbd "C-r")
                  'undo-fu-only-redo))
              '())
        (evil-mode 1)
        ,@(if commentary?
              `((require 'evil-commentary)
                (evil-commentary-mode))
              '())
        ,@(if collection?
              `((when
                    (require 'evil-collection nil t)
                  (evil-collection-init)))
              '())
        )
      #:elisp-packages
      (list
       emacs-evil
       (if leader? emacs-evil-leader)
       (if undo-fu? emacs-undo-fu)
       (if commentary? emacs-evil-commentary)
       (if collection? emacs-evil-collection)
       (if surround? emacs-evil-surround)))))
  (make-emacs-feature emacs-f-name
                      #:home-services get-home-services))



(define %user-features
  (list
   (feature-user-info
    #:user-name "jak"
    #:full-name "Jacob Boldman"
    #:email "jacob@boldman.co"
    #:emacs-advanced-user? #t)
;;;TODO
;;; (feature-keyboard
;;;  #:keyboard-layout
;;;  (keyboard-layout ))
   ))

(define*
  (pkgs #:rest lst)
  (map specification->package+output lst))

(define*
  (pkgs-vanilla #:rest lst)
  "Packages from guix channel."
  (define channel-guix
    (list
     (channel
      (name 'guix)
      (url "https://git.savannah.gnu.org/git/guix.git")
      (commit
       "2b6af630d61dd5b16424be55088de2b079e9fbaf"))))
  (define inferior
    (inferior-for-channels channel-guix))
  (define
    (get-inferior-pkg pkg-name)
    (car
     (lookup-inferior-packages inferior pkg-name)))
  (map get-inferior-pkg lst))

(define %main-features
  (list
   (feature-base-services)
   (feature-desktop-services)
   (feature-docker)
   (feature-pipewire)
   (feature-backlight #:step 5)
   (feature-fonts
    #:font-monospace
    (font "Iosevka" #:size 11 #:weight 'regular)
    #:font-packages
    (list font-iosevka font-fira-mono))
   (feature-vterm)
   (feature-zsh
    #:enable-zsh-autosuggestions? #t)
   (feature-bash)
   (feature-direnv)
   (feature-ssh)
   ;;TODO
   ;;Add wayland features dwl-guile, dtao-guile, etc..
   (feature-wayland-dwl-guile
    #:dwl-guile-configuration
    (home-dwl-guile-configuration
     (patches %lattice-dwl-guile-patches)
     (config %lattice-dwl-guile-config)))
   (feature-wayland-mako)
   (feature-wayland-foot)
   (feature-wayland-wlsunset)
   (feature-wayland-dtao-guile)
   (feature-emacs
    #:extra-init-el
    `((setq org-src-window-setup 'current-window)
      (setq org-roam-dailies-capture-templates
            '(("d" "default" entry
               "* %?"
               :target (file+head "%<%Y-%m-%d>.org"
                                  "#+title: %<%Y-%m-%d>\n"))
              ("f" "Five Minute Journal")
              ("fm" "Five Minute Journal" entry
               "** Morning\nWhat am I grateful for?\n%?\nWhat would make today great?\n"
               :target (file+head+olp "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n" ("Five Minute Journal"))
               :unnarrowed t)
              ("j" "Five Minute Journal" entry
               "** Morning\n*** What am I grateful for?\n%^{Grateful for?}"
               :target (file+olp "%<%Y-%m-%d>.org" ("Five Minute Journal"))
               :unnarrowed t))))
    #:additional-elisp-packages
    (append
     (list emacs-dirvish)
     (pkgs "emacs-elfeed" "emacs-hl-todo"
           "emacs-ytdl" "emacs-consult-dir"
           "emacs-all-the-icons-completion" "emacs-all-the-icons-dired"
           "emacs-kind-icon"
           "emacs-lispy"
           "emacs-multitran"
           "emacs-minimap"
           "emacs-ement"
           "emacs-restart-emacs"
           "emacs-org-present")))
   (feature-emacs-appearance
   #:deuteranopia? #f
    #:dark? #f
    #:extra-elisp
    `((setq modus-themes-org-blocks 'tinted-background)))
   (feature-emacs-faces)
   (feature-emacs-evil)
   (feature-emacs-completion
    #:mini-frame? #t)
   (feature-emacs-corfu)
   (feature-emacs-tramp)
   (feature-emacs-vertico)
   (feature-emacs-project)
   (feature-emacs-perspective)
   (feature-emacs-input-methods)
   (feature-emacs-which-key)
   (feature-emacs-keycast #:turn-on? #f)
   (feature-emacs-dired)
   (feature-emacs-eshell)
   (feature-emacs-monocle)
   (feature-emacs-message)
   (feature-emacs-elpher)
   (feature-emacs-pdf-tools)
   (feature-emacs-nov-el)
   (feature-emacs-smartparens
    #:show-smartparens? #t)
   (feature-emacs-geiser)
   (feature-emacs-guix)
   (feature-emacs-git)
   (feature-emacs-org
    #:org-directory "~/org")
   (feature-emacs-org-roam
    #:org-roam-directory "~/org/slipbox"
    #:org-roam-dailies-directory "~/org/slipbox/journal/")
   (feature-emacs-org-agenda
    #:org-agenda-files
    '("~/org/todo.org"))
   (feature-emacs-org-latex-preview)
   (feature-markdown)
   (feature-mpv)
   (feature-transmission #:auto-start? #f)
   (feature-xdg
    #:xdg-user-directories-configuration
    (home-xdg-user-directories-configuration
     (music "$HOME/music")
     (videos "$HOME/vids")
     (pictures "$HOME/pics")
     (documents "$HOME/docs")
     (download "$HOME/dl")
     (desktop "$HOME")
     (publicshare "$HOME")
     (templates "$HOME")))
   (feature-base-packages
    #:home-packages
    (append
     (pkgs
      "figlet"
      "calibre"
      "icecat" "nyxt"
      "ungoogled-chromium-wayland" "ublock-origin-chromium"

      "alsa-utils" "youtube-dl" "imv"
      "pavucontrol" "wev"
      "hicolor-icon-theme" "adwaita-icon-theme"
      "papirus-icon-theme" "arc-theme"
      "ffmpeg"
      "ripgrep" "curl")))))

(define-public %lattice-timezone "America/Phoenix")
(define-public %lattice-local "en_US.utf8")

(define-public %lattice-kernel-arguments
  (list "modprobe.blacklist=pcspkr,snd_pcsp"
        "quiet"))


(define-public %lattice-initial-os
  (operating-system
   (host-name "hal")
   (locale %lattice-local)
   (timezone %lattice-timezone)
   (kernel-arguments %lattice-kernel-arguments)
   (keyboard-layout %lattice-keyboard-layout)
   (bootloader
    (bootloader-configuration
     (bootloader grub-efi-bootloader)
     (targets
      '("/bootefi"))))
   (services
    '())
   (file-systems %base-file-systems)
   (issue "This is the GNU/Lattice system.\n")))

(define-public %lattice-system-base-features
  (list
   (feature-keyboard
    #:keyboard-layout %lattice-keyboard-layout)))


(define-public %system-features
  (list
   (feature-host-info
    #:host-name "hal"
    #:timezone "America/Phoenix")
;;; (feature-bootloader)
   (feature-file-systems
    #:file-systems
    (list
     (file-system
      (mount-point "/boot/efi")
      (device
       (uuid "0351-5D8F" 'fat32))
      (type "vfat"))
     (file-system
      (mount-point "/")
      (device
       (uuid "01ccdad1-366b-4d8d-92e8-30315e87e8b9"))
      (type "ext4"))))))

(define-public lattice-config
  (rde-config
   (features
    (append
     %user-features
     %main-features
     %system-features))))

(define-public lattice-os
  (rde-config-operating-system lattice-config))

(define-public lattice-he
  (rde-config-home-environment lattice-config))

(define
  (dispatcher)
  (let
      ((rde-target
        (getenv "RDE_TARGET")))
    (match rde-target
      ("home" lattice-he)
      ("system" lattice-os)
      (_ lattice-he))))

(dispatcher)
#+end_src
