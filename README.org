:PROPERTIES:
:ID:       be09c8bb-f53c-451c-9d06-5dcdc6f61000
:END:
#+title: Dotfiles
#+author: Jacob Boldman
#+email: jacob@boldman.co

#+startup: overview
#+startup: hideblocks

#+export_file_name: dotfiles

#+HTML: <a href="https://www.gnu.org/software/emacs/"><img src="https://img.shields.io/badge/Emacs-28.0.91-blueviolet.svg?style=flat-square&logo=GNU%20Emacs&logoColor=white"></a>
#+HTML: <a href="https://orgmode.org"><img src="https://img.shields.io/badge/Org-9.5.2-%2377aa99?style=flat-square&logo=org&logoColor=white"></a>

#+name: description
#+BEGIN_SRC text
Immutable GNU/Guix configurations.
#+END_SRC

Built for freedom

+ 100% Immutable
+ 100% Declarative
+ 100% Reproducible

* Introduction

#+NAME: description
#+begin_src text
Reproducible GuixSD dotfiles
#+end_src
This is my personal configuration for [[https://linux.org][GNU/Linux]] systems. It enables a consistent experience and computing environment across all of my machines. This project is written with [[https://gnu.org/software/emacs/][GNU/Emacs]], leveraging its capabilities for [[https://doi.org/10.1093/comjnl/27.2.97][Literate Programming]], a technique where programs are written in a natural language, such as English, interspersed with snippets of code to describe a software project.
I used "lattice" as my module name as a play on a structure to control my GNU/Guix herd.
These configurations utilize [[https://git.sr.ht/~abcdw/rde][Tropin's rde system]] and are heavily inspired by [[https://github.com/engstrand-config/guix-dotfiles][Engstrands' guix-dotfiles]] to make as much of the system configurable by guile as possible.
#+NAME: file-warning
#+BEGIN_SRC text
    This file is controlled by /etc/dotfiles/README.org
    ALL CHANGES ARE FUTILE!
#+END_SRC

* Base
This serves as the base config that the rde based modules will be broken out from. The goal is for this file to become minimal declaration that refers to my modules.
#+begin_src scheme :tangle ./configs.scm :noweb yes 
  ;;<<file-warning>>
  (define-module (configs)
    #:use-module (rde features)
    #:use-module (rde features base)
    #:use-module (rde features gnupg)
    #:use-module (rde features keyboard)
    #:use-module (rde features system)
    #:use-module (rde features wm)
    #:use-module (rde features xdisorg)
    #:use-module (rde features xdg)
    #:use-module (rde features password-utils)
    #:use-module (rde features version-control)
    #:use-module (rde features fontutils)
    #:use-module (rde features terminals)
    #:use-module (rde features tmux)
    #:use-module (rde features shells)
    #:use-module (rde features ssh)
    #:use-module (rde features emacs)
    #:use-module (rde features linux)
    #:use-module (rde features bittorrent)
    #:use-module (rde features mail)
    #:use-module (rde features docker)
    #:use-module (rde features video)
    #:use-module (rde features markup)
    #:use-module (rde features networking)
    #:use-module (gnu services)
    #:use-module (gnu system)
    #:use-module (gnu system keyboard)
    #:use-module (gnu system file-systems)
    #:use-module (gnu system mapped-devices)
    #:use-module (gnu packages)
    #:use-module (rde packages emacs)
    #:use-module (rde packages emacs-xyz)
    #:use-module (gnu packages fonts)
    #:use-module (guix gexp)
    #:use-module (guix inferior)
    #:use-module (guix channels)
    #:use-module (lattice features emacs)
    #:use-module (lattice features wayland)
    #:use-module (lattice systems)
    #:use-module (ice-9 match))


  ;; User-specific features

  (define %jak-features
    (list
     (feature-user-info
      #:user-name "jak"
      #:full-name "Jacob Boldman"
      #:email "jacob@boldman.co")))

  ;;; Generic features should be applicable for various hosts/users/etc

  (define* (pkgs #:rest lst)
    (map specification->package+output lst))

  (define* (pkgs-vanilla #:rest lst)
    "Packages from guix channel."
    (define channel-guix
      (list (channel
	     (name 'guix)
	     (url "https://git.savannah.gnu.org/git/guix.git")
	     (commit
	      "2b6af630d61dd5b16424be55088de2b079e9fbaf"))))
    (define inferior (inferior-for-channels channel-guix))
    (define (get-inferior-pkg pkg-name)
      (car (lookup-inferior-pkg pkg-name)))

    (map get-inferior-pkg lst))

  ;;; WARNING: The order can be important for features extending
  ;;; service of other features. Be careful changing it.
  (define %main-features
    (append
     (list
      (feature-base-services)
      (feature-desktop-services)
      (feature-docker)
      (feature-pipewire)
      (feature-backlight #:step 5)

      (feature-fonts
       #:font-monospace (font "Iosevka" #:size 11 #:weight 'regular)
       #:font-packages (list font-iosevka font-fira-mono))

      (feature-markdown)
      (feature-transmission #:auto-start? #f)
      (feature-ssh)

      (feature-base-packages
       #:home-packages
       (append
	(pkgs
	 "nyxt"
	 "ungoogled-chromium-wayland" "ublock-origin-chromium"

	 "jami"

	 "alsa-utils" "youtube-dl" "imv"
	 "pavucontrol" "wev"
	 "hicolor-icon-theme" "adwaita-icon-theme" "gnome-themes-standard"
	 "papirus-icon-theme" "arc-theme"
	 "ffmpeg"
	 "ripgrep" "curl"))))

     %lattice-system-base-features
     %lattice-emacs-base-features
     %lattice-dwl-config))

  ;;; Hardware/host specific features

  (define hal-file-systems
    (list (file-system
	    (mount-point "/boot/efi")
	    (device (uuid "0351-5D8F" 'fat32))
	    (type "vfat"))
	   (file-system
	    (mount-point "/")
	    (device
	     (uuid "01ccdad1-366b-4d8d-92e8-30315e87e8b9"))
	    (type "ext4"))))

  (define %hal-features
    (list
     (feature-host-info
      #:host-name "hal"
      #:timezone %lattice-timezone)
     ;;Setup bootloader
     ;;(feature-bootloader)
     (feature-file-systems
      #:file-systems hal-file-systems)))

  ;;; rde-config and helpers for generating home-environment and
  ;;; operating-system records.

  (define-public hal-config
    (rde-config
     (features
      (append
       %jak-features
       %main-features
       %hal-features))))

  (define-public hal-os
    (rde-config-operating-system hal-config))

  (define hal-he
    (rde-config-home-environment hal-config))

  (define (dispatcher)
    (let ((rde-target (getenv "RDE_TARGET")))
      (match rde-target
	("hal-home" (rde-config-home-environment hal-config))
	("hal-system" (rde-config-operating-system hal-config)))))

  (dispatcher)
#+end_src

* Emacs
This module defines my emacs configuration.
#+begin_src scheme :noweb yes :tangle ./lattice/features/emacs.scm
  ;;<<file-warning>>
  (define-module (lattice features emacs)
    #:use-module (guix gexp)
    #:use-module (gnu home services)
    #:use-module (gnu services)
    #:use-module (gnu packages)
    #:use-module (gnu packages emacs)
    #:use-module (gnu packages emacs-xyz)
    #:use-module (rde features)
    #:use-module (rde features base)
    #:use-module (rde features emacs)

    #:export (%lattice-emacs-base-features))

  (define* (make-emacs-feature base-name
			       #:key
			       (home-services (const '()))
			       (system-services (const '())))
    "Creates a basic emacs feature configuration."
    (let ((f-name (symbol-append 'emacs- base-name)))
      (feature
       (name f-name)
       (values `((,f-name . #t)))
       (home-services-getter home-services)
       (system-services-getter system-services))))

  (define* (feature-emacs-evil
	    #:key
	    (no-insert-state-message? #t)
	    (leader? #t)
	    (undo-fu? #t)
	    (commentary? #t)
	    (collection? #t)
	    (surround? #t))
    "Add and configure evil-mode for Emacs."
    (ensure-pred boolean? no-insert-state-message?)
    (ensure-pred boolean? leader?)
    (ensure-pred boolean? undo-fu?)
    (ensure-pred boolean? collection?)
    (ensure-pred boolean? surround?)
    (define emacs-f-name 'evil)

    (define (get-home-services config)
      (list
       (elisp-configuration-service
	emacs-f-name
	`(;; Make the Escape key behave more nicely for evil-mode
	  (global-set-key (kbd "<escape>") 'keyboard-quit)
	  (define-key query-replace-map (kbd "<escape>") 'quit)
	  ;; Hide ``-- INSERT --'' message
	  ,@(if no-insert-state-message?
		`((setq evil-insert-state-message nil))
		'())
	  ;; Required by the additional packages
	  (setq evil-want-keybinding nil)
	  ;; Use C-u to scroll up
	  (setq evil-want-C-u-scroll t)
	  ;; undo with higher granularity
	  (setq evil-want-fine-undo t)
	  ;; The packages below must be loaded and configured in a certain order
	  (require 'evil)
	  ,@(if leader?
		`((require 'evil-leader)
		  (global-evil-leader-mode)
		  (evil-leader/set-leader "<SPC>")
		  (evil-leader/set-key
		   "<SPC>" 'find-file
		   "b" 'switch-to-buffer
		   "k" 'kill-buffer
		   "K" 'kill-this-buffer
		   "s" 'save-buffer
		   "S" 'evil-write-all
		   )
		  '()))
	  ,@(if undo-fu?
		`((eval-when-compile (require 'undo-fu))
		  (setq evil-undo-system 'undo-fu)
		  (define-key evil-normal-state-map (kbd "u") 'undo-fu-only-undo)
		  (define-key evil-normal-state-map (kbd "C-r") 'undo-fu-only-redo))
		'())
	  (evil-mode 1)
	  ,@(if commentary?
		`((require 'evil-commentary)
		  (evil-commentary-mode))
		'())
	  ,@(if collection?
		`((when (require 'evil-collection nil t)
		    (evil-collection-init)))
		'())
	  ,@(if surround?
		`((require 'evil-surround)
		  (global-evil-surround-mode 1))
		'())
	  )
	#:elisp-packages (list
			  emacs-evil
			  (if leader? emacs-evil-leader)
			  (if undo-fu? emacs-undo-fu)
			  (if commentary? emacs-evil-commentary)
			  (if collection? emacs-evil-collection)
			  (if surround? emacs-evil-surround)))))
    (make-emacs-feature emacs-f-name
			#:home-services get-home-services))



  (define* (pkgs #:rest lst)
    (map specification->package+output lst))

  (define %lattice-emacs-base-features
    (list
     (feature-emacs
      ;;#:emacs emacs-pgtk-native-comp
      #:extra-init-el `()
      #:additional-elisp-packages
      (append
       (list emacs-consult-dir)
       (pkgs "emacs-elfeed" "emacs-hl-todo"
	     "emacs-ytdl"
	     "emacs-ement"
	     "emacs-restart-emacs"
	     "emacs-org-present")))
     (feature-emacs-appearance)
     (feature-emacs-faces)
     (feature-emacs-evil)
     (feature-emacs-completion
      #:mini-frame? #t)
     (feature-emacs-vertico)
     (feature-emacs-project)
     (feature-emacs-perspective)
     (feature-emacs-input-methods)
     (feature-emacs-which-key)
     (feature-emacs-keycast #:turn-on? #f)

     (feature-emacs-dired)
     (feature-emacs-eshell)
     (feature-emacs-monocle)
     (feature-emacs-elpher)
     (feature-emacs-pdf-tools)

     (feature-emacs-git)
     (feature-emacs-org
      #:org-directory "~/org")
     (feature-emacs-org-roam
      #:org-roam-directory "~/org/slipbox")
     (feature-emacs-org-agenda
      #:org-agenda-files '("~/org/todo.org"))))
#+end_src

* Wayland

#+begin_src scheme :noweb yes :tangle ./lattice/features/wayland.scm
  ;;<<file-warning>>
  (define-module (lattice features wayland)
    #:use-module (guix gexp)
    #:use-module (gnu home services)
    #:use-module (srfi srfi-1)
    #:use-module (gnu services)
    #:use-module (gnu services xorg)
    #:use-module (gnu packages wm)
    #:use-module (gnu packages image)
    #:use-module (gnu packages admin)
    #:use-module (gnu packages xdisorg)
    #:use-module (gnu packages terminals)
    #:use-module (gnu packages freedesktop)
    #:use-module (gnu home services shepherd)
    #:use-module (rde features)
    #:use-module (rde features fontutils)
    #:use-module (rde features predicates)
    #:use-module (rde features wm)
    #:use-module (lattice utils)
    #:use-module (lattice systems)
    #:use-module (dwl-guile utils)
    #:use-module (dwl-guile patches)
    #:use-module (dwl-guile home-service)
    #:use-module (dwl-guile configuration)
    #:use-module (dwl-guile configuration default-config)

    #:export (
	      %lattice-dwl-config
	      %lattice-sway-config))

  (define %lattice-dwl-guile-patches
    (list %patch-xwayland
	  %patch-swallow
	  %patch-movestack
	  %patch-attachabove))

  (define %lattice-dwl-guile-config
    (dwl-config
     (xkb-rules %lattice-keyboard-layout)
     (border-px 2)
     (rules
      (list
       (dwl-rule (id "emacs")
		 (title "emacs")
		 (alpha 0.9))))
     (keys
      (append
       (list
	(dwl-key
	 (key "s-0")
	 (action '(dwl:cycle-layout)))
	(dwl-key
	 (key "s-<tab>")
	 (action '(dwl:view-previous))))
       %dwl-base-keys))
     (colors
      (dwl-colors
       (root "#191919")
       (border "#808080")
       (focus "#FFCC00")))))

  ;; Checks if SYMBOL corresponds to a patch that is/will
  ;; be applied to dwl-guile, based on the features values in CONFIG.
  ;; SYMBOL should be the name of the patch, not including the ".patch" extension.
  ;; I.E @code{(has-dwl-patch? 'xwayland config)}.
  (define (has-dwl-patch? symbol config)
    (let ((patch-name (string-append (symbol->string symbol) ".patch")))
      (find (lambda (p) (equal? patch-name (local-file-name p)))
	    (get-value 'dwl-guile-patches config))))

  (define* (feature-wayland-dwl-guile
	    #:key
	    (dwl-guile-configuration (home-dwl-guile-configuration)))
    "Setup dwl-guile."
    (ensure-pred home-dwl-guile-configuration? dwl-guile-configuration)
    (define (get-home-services config)
      "Return a list of home services required by dwl."
      (list
       (service home-dwl-guile-service-type
		dwl-guile-configuration)))

    (feature
     (name 'wayland-dwl-guile)
     (values `((wayland . #t)
	       (dwl-guile . #t)
	       (dwl-guile-patches
		. ,(home-dwl-guile-configuration-patches dwl-guile-configuration))))
     (home-services-getter get-home-services)))

  (define-public %lattice-dwl-config
    (list
     (feature-wayland-dwl-guile
      #:dwl-guile-configuration
      (home-dwl-guile-configuration
       (patches %lattice-dwl-guile-patches)
       (config %lattice-dwl-guile-config)))))

  (define-public %lattice-sway-config
    (list
      (feature-sway
       #:xwayland? #f
       #:extra-config
       `((output DP-2 scale 2)
	 (workspace 9 output DP-2)
	 (workspace 10 output DP-2)

	 (bindsym
	  --locked $mod+Shift+p exec
	  ,(file-append (@ (gnu packages music) playerctl) "/bin/playerctl")
	  play-pause)
	 (bindsym $mod+Shift+Return exec emacs)))
      (feature-sway-screenshot)
      (feature-waybar
       #:waybar-modules
       (list
	(waybar-sway-workspaces)
	(waybar-tray)
	(waybar-idle-inhibitor)
	(waybar-sway-language)
	(waybar-battery #:intense? #f)
	(waybar-clock)))
      (feature-swayidle)
      (feature-swaylock
       #:swaylock (@ (gnu packages wm) swaylock-effects)
       #:extra-config '((clock)))))
#+end_src

* Utils
This defines some utilities for building custom features, stolen from [[https://github.com/engstrand-config/guix-dotfiles][Engstrands' configs]].

#+begin_src scheme :noweb yes :tangle ./lattice/utils.scm
  ;;<<file-warning>>
  (define-module (lattice utils)
    #:use-module (ice-9 match)
    #:use-module (srfi srfi-1)
    #:use-module (guix gexp)
    #:use-module (gnu packages)
    #:use-module (rde features)
    #:use-module (rde features fontutils)
    #:use-module (rde features predicates)
    #:export (
	      modify-features
	      font->string))

  ;; Converts a list of kernel modules into a list of packages.
  ;; Each kernel module should accept the current system kernel
  ;; as a single argument. The kernel module should then dynamically
  ;; create a valid kernel module package based on the specified kernel.
  (define-public (kernel-modules->list modules kernel)
    (map (lambda (mod) (mod kernel)) modules))

  ;; Converts a list of package names into the actual package definitions.
  (define-public (pkgs lst)
    (map specification->package lst))

  ;; Helper for removing #<unspecified> from a list.
  ;; This means that we easily can conditionally add services to the list:
  ;;
  ;; @example
  ;; (list
  ;;   (simple-service ...)
  ;;   (simple-service ...)
  ;;   (when add-keybindings? (simple-service ...)))
  ;; @end example
  (define-public (make-service-list . services)
    (filter (lambda (v) (not (unspecified? v))) services))

  ;; Predicates
  (define-public (dotfile? x)
    (and (string? (car x))
	 (or (file-like? (cadr x)) (gexp? (cadr x)))))

  (define-public (state-item? x)
    (and (string? (car x)) (string? (cdr x))))

  (define-public (list-of-dotfiles? x)
    (every dotfile? x))

  (define-public (list-of-state-items? x)
    (every state-item? x))

  (define-syntax %modify-feature
    (syntax-rules ()
      ((_ feature (delete kind) clauses ...)
       (if (eq? (feature-name feature) kind)
	   #f
	   (%modify-feature feature clauses ...)))
      ((_ feature)
       feature)))

  (define-syntax modify-features
    (syntax-rules ()
      "Modify the features listed in FEATURES according to CLAUSES and return
      the resulting list of features  Each clause must have the form: (delete FEATURE-NAME)"
      ((_ features clauses ...)
       (filter-map (lambda (feature)
		     (%modify-feature feature clauses ...))
		   features))))

  ;; Serializes an alist with key-value pairs into an ini configuration file.
  ;; If no value is specified, only the key will be returned.
  ;;
  ;; @example
  ;; (serialize-ini-config
  ;;  `(("foo" . "bar")
  ;;    ("key-with-no-value")))
  ;; @end
  ;; yields a string containing newlines:
  ;; foo=bar
  ;; key-with-no-value
  (define-public (alist->ini filename alist)
    (plain-file filename
		(fold-right
		 (lambda (entry acc)
		   (let ((key (car entry))
			 (value (cdr entry)))
		     (string-append
		      key
		      (if (null? value)
			  ""
			  (string-append "="
					 (if (number? value)
					     (number->string value)
					     value)))
		      "\n" acc)))
		 ""
		 alist)))

  (define-public (alist->environment-variable var alist)
    (define (add-arg acc key value)
      (string-append acc " --" key
		     (if (not value) "" (string-append " " value))))

    ;; Join arguments into a single string, with each key prefixed
    ;; with "--" and the key and value separated with a space.
    ;; Values that has no value (or #t) will only add the prefixed key.
    ;; If the value is #f, the key will not be included at all.
    (define str
      (fold
       (lambda (arg acc)
	 (let ((key (car arg)) (value (cdr arg)))
	   (cond
	    ((string? value) (add-arg acc key (string-append "'" value "'")))
	    ((number? value) (add-arg acc key (number->string value)))
	    ((eq? value #t) (add-arg acc key #f))
	    (else acc))))
       "" alist))

    ;; Return an alist containing the environment variable name VAR
    ;; and its value as the result of serializing ALIST.
    `((,var . ,(string-append "\"" str "\""))))

  (define-public (make-log-file name)
    (string-append (or (getenv "XDG_LOG_HOME")
		       (getenv "HOME"))
		   "/" name ".log"))

  ;; Convert a font into a pango or fcft string that can be used in
  ;; configuration files.
  (define* (font->string fmt type config
			 #:key
			 (bold? '())
			 (size '()))
    (define (weight->string weight)
      (let ((str (symbol->string weight)))
	(match fmt
	  ('pango (string-capitalize str))
	  ('fcft str)
	  (_ str))))

    (define (get-weight font)
      (let ((weight (cond
		     ((null? bold?)
		      (if (font-weight font)
			  (font-weight font)
			  'normal))
		     ((eq? bold? #t) 'bold)
		     ((eq? bold? #f) 'normal))))
	(weight->string weight)))

    (let ((font (get-value type config))
	  (fmt-string (if (eq? fmt 'pango) "~a ~a ~a" "~a:style=~a:size=~a")))
      (format #f fmt-string
	      (font-name font)
	      (get-weight font)
	      (if (null? size) (font-size font) size))))

#+end_src
